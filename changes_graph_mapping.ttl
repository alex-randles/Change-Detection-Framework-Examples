@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix testv: <http://www.txample.com/people/voc/>.
@prefix testd: <http://www.txample.com/people/data/>.
@prefix cdo: <https://change-detection-ontology.adaptcentre.ie/#> . 
@prefix lode: <http://linkedevents.org/ontology/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix time: <http://www.w3.org/2006/time#> . 
@prefix rei-action: <http://www.cs.umbc.edu/~lkagal1/rei/ontologies/ReiAction.owl#> .
@prefix rei-entity: <http://www.cs.umbc.edu/~lkagal1/rei/ontologies/ReiEntity.owl#> .
@prefix rei-policy: <http://www.cs.umbc.edu/~lkagal1/rei/ontologies/ReiPolicy.owl#> .
@prefix rei-denontic: <http://www.cs.umbc.edu/~lkagal1/rei/ontologies/ReiDeontic.owl#> .
@prefix rei-constraint: <http://www.cs.umbc.edu/~lkagal1/rei/ontologies/ReiConstraint.owl#> .
@prefix rei-meta-policy: <http://www.cs.umbc.edu/~lkagal1/rei/ontologies/ReiMetaPolicy.owl#> .
@prefix ex: <http://www.example.com/> . 



######################################
## TRIPLE MAPS REPRESENTING CHANGES ##
######################################

<#ChangeLog>

    rr:logicalTable [
                      rr:sqlQuery """
                          Select ID, Operation, USER_ID
                          FROM transaction_log
                          WHERE Operation IN ('LOP_INSERT_ROWS')
                           """;
                        rr:sqlVersion rr:SQL2008;
    ];

    rr:subjectMap [
        rr:template "http://www.example.com/changeLog/{USER_ID}";
        rr:class          cdo:ChangeLog;
        rr:graphMap [ rr:template "http://www.example.com/changesGraph/user/{USER_ID}" ];

    ];

    rr:predicateObjectMap [
        rr:predicate cdo:hasChange ;
        rr:objectMap  [
               rr:parentTriplesMap <#DeleteChanges> ;
                rr:joinCondition [
                        rr:child "USER_ID";
                        rr:parent "USER_ID";
                ];
        ];
   ];

    rr:predicateObjectMap [
        rr:predicate cdo:hasChange ;
        rr:objectMap  [
                rr:parentTriplesMap <#UpdateChanges> ;
                rr:joinCondition [
                        rr:child "USER_ID";
                        rr:parent "USER_ID";
                ];
        ];
   ];
   
    rr:predicateObjectMap [
        rr:predicate cdo:hasChange ;
        rr:objectMap  [
               rr:parentTriplesMap <#InsertChanges> ;
                rr:joinCondition [
                        rr:child "USER_ID";
                        rr:parent "USER_ID";
                ];
        ];
   ];
.


# Delete Changes
<#DeleteChanges>

    rr:logicalTable [
                      rr:sqlQuery """
                          Select ID, Operation, USER_ID
                          FROM transaction_log
                          WHERE Operation IN ('LOP_DELETE_ROWS')
                           """;
                        rr:sqlVersion rr:SQL2008;
    ];

    rr:subjectMap [
        rr:template "http://www.example.com/deleteChange/{ID}";
        rr:class cdo:DeleteSourceData;
        rr:graphMap [ rr:template "http://www.example.com/changesGraph/user/{USER_ID}" ];
    ];

    rr:predicateObjectMap [
        rr:predicate lode:atTime ;
        rr:objectMap  [
            rr:template "http://www.example.com/detectionTime/{ID}";
        ];
   ];

.

<#UpdateChanges>

    rr:logicalTable [
                      rr:sqlQuery """
                          Select ID, Operation, USER_ID
                          FROM transaction_log
                          WHERE Operation IN ('LOP_MODIFY_ROWS')
                           """;
                        rr:sqlVersion rr:SQL2008;
    ];

    rr:subjectMap [
        rr:template "http://www.example.com/updateChange/{ID}";
        rr:class cdo:UpdateSourceData;
        rr:graphMap [ rr:template "http://www.example.com/changesGraph/user/{USER_ID}" ];

    ];

    rr:predicateObjectMap [
        rr:predicate lode:atTime ;
        rr:objectMap  [
            rr:template "http://www.example.com/detectionTime/{ID}";
        ];
   ];

.

<#InsertChanges>

    rr:logicalTable [
                      rr:sqlQuery """
                          Select ID, Operation, USER_ID
                          FROM transaction_log
                          WHERE Operation IN ('LOP_INSERT_ROWS')
                           """;
                        rr:sqlVersion rr:SQL2008;
    ];

    rr:subjectMap [
        rr:template "http://www.example.com/insertChange/{ID}";
        rr:class cdo:InsertSourceData;
             rr:graphMap [ rr:template "http://www.example.com/changesGraph/user/{USER_ID}" ];

    ];

    rr:predicateObjectMap [
        rr:predicate lode:atTime ;
        rr:objectMap  [
            rr:template "http://www.example.com/detectionTime/{ID}";
        ];
   ]; .


# Time the change was detected
<#DetectionTime>

    rr:logicalTable [ rr:tableName "TRANSACTION_LOG"];

    rr:subjectMap [
        rr:template "http://www.example.com/detectionTime/{ID}";
        rr:class time:Instant;
        rr:graphMap [ rr:template "http://www.example.com/changesGraph/user/{USER_ID}" ];

    ];

    rr:predicateObjectMap [
        rr:predicate time:inXSDDateTimeStamp ;
        rr:objectMap  [
            rr:column "END_TIME";
            rr:datatype xsd:dateTimeStamp;
        ];
   ]; .

